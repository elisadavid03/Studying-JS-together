Array methods

JavaScript arrays come with a variety of built-in methods that make it easy to perform common tasks such as adding, removing, and manipulating elements. Here are some of the most commonly used array methods, explained in a simple and detailed manner.

Basic Methods

1. push()

Adds one or more elements to the end of an array and returns the new length of the array.

const fruits = ['apple', 'banana'];

const newLength = fruits.push('orange');


console.log(fruits); // Output: ['apple', 'banana', 'orange']

console.log(newLength); // Output: 3

2. pop()

Removes the last element from an array and returns that element.

const fruits = ['apple', 'banana', 'orange'];

const lastFruit = fruits.pop();


console.log(fruits); // Output: ['apple', 'banana']

console.log(lastFruit); // Output: 'orange'

3. shift()

Removes the first element from an array and returns that element.

const fruits = ['apple', 'banana', 'orange'];

const firstFruit = fruits.shift();


console.log(fruits); // Output: ['banana', 'orange']

console.log(firstFruit); // Output: 'apple'

4. unshift()

Adds one or more elements to the beginning of an array and returns the new length of the array.

const fruits = ['banana', 'orange'];

const newLength = fruits.unshift('apple');


console.log(fruits); // Output: ['apple', 'banana', 'orange']

console.log(newLength); // Output: 3

Iteration Methods

5. forEach()

Executes a provided function once for each array element.

const fruits = ['apple', 'banana', 'orange'];

fruits.forEach(fruit => console.log(fruit));


// Output:

// apple

// banana

// orange

6. map()

Creates a new array with the results of calling a provided function on every element in the calling array.

const numbers = [1, 2, 3];

const doubled = numbers.map(number => number * 2);


console.log(doubled); // Output: [2, 4, 6]

7. filter()

Creates a new array with all elements that pass the test implemented by the provided function.

const numbers = [1, 2, 3, 4, 5];

const evenNumbers = numbers.filter(number => number % 2 === 0);


console.log(evenNumbers); // Output: [2, 4]

8. reduce()

Executes a reducer function (that you provide) on each element of the array, resulting in a single output value.

const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce((total, number) => total + number, 0);


console.log(sum); // Output: 15

9. find()

Returns the value of the first element in the array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.

const numbers = [1, 2, 3, 4, 5];

const found = numbers.find(number => number > 3);

console.log(found); // Output: 4

10. findIndex()

Returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1.

const numbers = [1, 2, 3, 4, 5];

const index = numbers.findIndex(number => number > 3);


console.log(index); // Output: 3

Other Useful Methods

11. includes()

Determines whether an array includes a certain value among its entries, returning true or false as appropriate.

const fruits = ['apple', 'banana', 'orange'];

const hasApple = fruits.includes('apple');


console.log(hasApple); // Output: true

12. some()

Tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.

const numbers = [1, 2, 3, 4, 5];

const hasEven = numbers.some(number => number % 2 === 0);


console.log(hasEven); // Output: true

13. every()

Tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.

const numbers = [1, 2, 3, 4, 5];

const allEven = numbers.every(number => number % 2 === 0);


console.log(allEven); // Output: false

14. slice()

Returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array.

const fruits = ['apple', 'banana', 'orange', 'grape'];

const citrus = fruits.slice(1, 3);


console.log(citrus); // Output: ['banana', 'orange']

15. splice()

Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.

const fruits = ['apple', 'banana', 'orange', 'grape'];

const removedFruits = fruits.splice(1, 2, 'kiwi', 'mango');


console.log(fruits); // Output: ['apple', 'kiwi', 'mango', 'grape']

console.log(removedFruits); // Output: ['banana', 'orange']

16. concat()

Used to merge two or more arrays. This method does not change the existing arrays but instead returns a new array.

const array1 = [1, 2];

const array2 = [3, 4];

const combinedArray = array1.concat(array2);


console.log(combinedArray); // Output: [1, 2, 3, 4]


Summary

JavaScript array methods provide a rich set of tools for working with arrays, making it easy to manipulate, search, and transform data. Understanding these methods can help you write cleaner, more efficient code.
